#include<iostream>
#include<bits/stdc++.h>
using namespace std;
const int Alphabet_size=26;
struct TrieNode {
   struct TrieNode *child[Alphabet_size];
    bool isEndOfWord;    
};
struct TrieNode *getNode(void){
    TrieNode *temp=new TrieNode;
    temp->isEndOfWord=false;
    for(int i=0;i<Alphabet_size;i++){
        temp->child[i]=NULL;
    }
    return temp;
}
//to search a trienode
bool Search(struct TrieNode *root, string key){
    struct TrieNode *curr=root;
    for(int i=0;i< key.length();i++){
        int index=key[i]-'a';
        if(curr->child[index]==NULL){
            return false;
        }
        curr=curr->child[index];
    }
    return curr->isEndOfWord;
}
//to insert a key in a dictionary 
void insert(struct TrieNode *root, string key){
   struct TrieNode *curr =root;
   for(int i=0;i<key.length();i++){
    int index=key[i]='a';
    if(curr->child[index]==NULL){
        curr->child[index]=getNode();
    }
    curr=curr->child[index];
   }
   curr->isEndOfWord=true;
}
int main(){
    string keys[]={"bad","bat","geeks","geek","cat","cut"};
    int n =sizeof(keys)/sizeof(keys[0]);

    struct TrieNode *root =getNode();
    for(int i=0;i<n;i++){
        insert(root,keys[i]);
    }

    Search(root, "bat")? cout<<"Yes\n":
                         cout<<"NO\n";
    Search(root,"gee")?cout<<"Yes\n":
                         cout<<"NO\n";

   return 0;
}
