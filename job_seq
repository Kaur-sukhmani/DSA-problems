#include<iostream>
#include<algorithm>
using namespace std;
//job sequencing 
/*Given an array of jobs where every job has a deadline and associated profit if
 the job is finished before the deadline. It is also given that every job takes a single unit of time, 
 so the minimum possible deadline for any job is 1. Maximize the total profit if only one job can be scheduled at a time.*/

struct job{
    char id;
    int deadline;
    int profit;
};
bool comp(job j1,job j2){
    return (j1.profit>j2.profit);
    //since we are comparing jobs in the squence of the profit
}
int min(int a ,int b){
    return (a<b)?a:b;
}
void jobsequence(job arr[],int n){
sort(arr,arr+n,comp);
int jobseq[n];//to store result(sequence of job)
//to keep the track of free time slots 
bool slot[n];

for(int i=0;i<n;i++){
    slot[i]=false;
}
for (int i=0;i<n;i++){
    for(int j=min(n,arr[i].deadline)-1;j>=0;j--){
        if(slot[j]==false){
            jobseq[j]=i;//add the job in the job sequence 
            slot[j]=true;
            break;
        }
    }
}
for(int i=0;i<n;i++){
    if(slot[i]){
        cout<<"\n"<<arr[jobseq[i]].id;
    }
}
}
int main(){
    job arr[]={{'a',2,100},{'b',1,19},{'c',2,27},{'d',1,25},{'e',3,15}};
    int n=5;
    cout<<"\n following is the maximum profit sequence of job sequencing";
    jobsequence(arr,n);
    return 0;
}
