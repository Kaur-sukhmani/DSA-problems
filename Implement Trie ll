#include<iostream>
#include <bits/stdc++.h>
using namespace std;
class TrieNode
{
    public:
	TrieNode *childern[26];
	int wordCount;
	int prefixCount;
    bool isTerminal;

	TrieNode()
	{
		for (int i = 0; i < 26; i++)
		{
			childern[i] = NULL;
		}
		wordCount = 0;//It represents the count of complete words present in the trie that are exactly equal to a given word. 
		prefixCount = 0;//It represents the count of words that have a particular prefix.
        isTerminal=false;
	}
};

class Trie{
	public:

	// Declare a variable root that denotes the root of the Trie.
	TrieNode *root;

	// Initialize the Trie.
	Trie()
	{
		root = new TrieNode();
	}

	// In this function we are inserting the word into our Trie.
	void insert(string word)
{
    TrieNode *curr = root;

    // Iterating through the string word.
    for (int i = 0; i < word.length(); i++)
    {
        int index = word[i] - 'a';

        if (curr->childern[index] == NULL)
        {
            curr->childern[index] = new TrieNode();
        }
        curr = curr->childern[index];
        curr->prefixCount++;
    }
    curr->wordCount++;
}

	int countWordsEqualTo(string word)
{
    TrieNode *curr = root;

    // Iterating through the string word.
    for (int i = 0; i < word.length(); i++)
    {
        int index = word[i] - 'a';

        if (curr->childern[index] == NULL)
        {
            return 0;
        }
        curr = curr->childern[index];
    }
    return curr->wordCount;
}

	int countWordsStartingWith(string word)
{
    TrieNode *curr = root;

    // Iterating through the string word.
    for (int i = 0; i < word.length(); i++)
    {
        int index = word[i] - 'a';

        if (curr->childern[index] == NULL)
        {
            return 0;
        }
        curr = curr->childern[index];
    }
    return curr->prefixCount;
}

	// In this function we are removing the word from "TRIE".
	void erase(string word)
{
    TrieNode *curr = root;
    TrieNode *parent = NULL;

    // Iterating through the string word.
    for (int i = 0; i < word.length(); i++)
    {
        int index = word[i] - 'a';

        if (curr->childern[index] == NULL)
        {
            return; // Word not found in the Trie, nothing to delete.
        }

        parent = curr;
        curr = curr->childern[index];
        curr->prefixCount--;

        if (curr->prefixCount == 0)
        {
            parent->childern[index] = NULL;
            delete curr;
            return;
        }
    }

    curr->wordCount--;
}
};
int main() {
    Trie trie;

    trie.insert("apple");
    trie.insert("banana");
    trie.insert("app");
    trie.insert("bat");

    cout << "Count of words 'apple': " << trie.countWordsEqualTo("apple") << endl; // Output: 1
    cout << "Count of words starting with 'ap': " << trie.countWordsStartingWith("ap") << endl; // Output: 2

    trie.erase("app");

    cout << "Count of words 'apple' after erasing 'app': " << trie.countWordsEqualTo("apple") << endl; // Output: 1
   cout << "Count of words starting with 'ap' after erasing 'app': " << trie.countWordsStartingWith("ap") << endl; // Output: 1

    return 0;
}
